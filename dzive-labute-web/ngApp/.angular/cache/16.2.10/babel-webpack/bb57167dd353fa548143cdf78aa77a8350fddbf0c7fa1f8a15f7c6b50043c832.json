{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class CookiesService {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  getCookieConsent() {\n    return this.cookieService.get('cookieConsent') === 'true';\n  }\n  setCookieConsent(value, days) {\n    this.cookieService.set('cookieConsent', value.toString(), days);\n  }\n  static #_ = this.ɵfac = function CookiesService_Factory(t) {\n    return new (t || CookiesService)(i0.ɵɵinject(i1.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookiesService,\n    factory: CookiesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CookiesService","constructor","cookieService","getCookieConsent","get","setCookieConsent","value","days","set","toString","_","i0","ɵɵinject","i1","CookieService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Radoslav\\Desktop\\projects\\dzive-labute-v2\\dzive-labute-web\\ngApp\\src\\app\\services\\cookies\\cookies.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CookiesService {\n\n  constructor(private cookieService: CookieService) { }\n\n  getCookieConsent(): boolean {\n    return this.cookieService.get('cookieConsent') === 'true';\n  }\n\n  setCookieConsent(value: boolean, days: number) {\n    this.cookieService.set('cookieConsent', value.toString(), days);\n  }\n\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;EAAmB;EAEpDC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACD,aAAa,CAACE,GAAG,CAAC,eAAe,CAAC,KAAK,MAAM;EAC3D;EAEAC,gBAAgBA,CAACC,KAAc,EAAEC,IAAY;IAC3C,IAAI,CAACL,aAAa,CAACM,GAAG,CAAC,eAAe,EAAEF,KAAK,CAACG,QAAQ,EAAE,EAAEF,IAAI,CAAC;EACjE;EAAC,QAAAG,CAAA,G;qBAVUV,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdf,cAAc;IAAAgB,OAAA,EAAdhB,cAAc,CAAAiB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}