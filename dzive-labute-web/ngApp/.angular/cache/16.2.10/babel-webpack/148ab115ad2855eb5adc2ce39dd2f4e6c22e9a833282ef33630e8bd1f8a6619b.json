{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class LoginService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.apiUrl = \"http://localhost:3000\";\n    this.username = '';\n    this.authToken = null;\n    this.logoutSubject = new Subject();\n    this.logoutObservable = this.logoutSubject.asObservable();\n  }\n  login(loginData) {\n    const url = `${this.apiUrl}/auth/login`;\n    this.username = loginData.username;\n    // Send the login request to the backend API\n    return this.http.post(url, loginData);\n  }\n  setAuthToken(token) {\n    this.cookieService.set('authToken', token);\n    this.authToken = token;\n  }\n  getAuthToken() {\n    return this.cookieService.get('authToken');\n  }\n  // Modified method to include JWT in the Authorization header\n  getHeaders() {\n    const token = this.getAuthToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  isAuthenticatedUser() {\n    return this.cookieService.check('authToken');\n  }\n  logout() {\n    this.cookieService.delete('authToken');\n  }\n  globalLogout() {\n    const url = `${this.apiUrl}/auth/glogout`;\n    this.http.post(url, {}).subscribe(response => {\n      console.log(response);\n    });\n  }\n  // Modified method to include headers in the request\n  getProtectedData() {\n    const url = `${this.apiUrl}/api/protected-data`;\n    const headers = this.getHeaders();\n    return this.http.get(url, {\n      headers\n    });\n  }\n  notifyLogout() {\n    this.logoutSubject.next();\n  }\n  getUsername() {\n    return this.username;\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","Subject","LoginService","constructor","http","cookieService","apiUrl","username","authToken","logoutSubject","logoutObservable","asObservable","login","loginData","url","post","setAuthToken","token","set","getAuthToken","get","getHeaders","isAuthenticatedUser","check","logout","delete","globalLogout","subscribe","response","console","log","getProtectedData","headers","notifyLogout","next","getUsername","_","i0","ɵɵinject","i1","HttpClient","i2","CookieService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Radoslav\\Desktop\\projects\\dzive-labute-v2\\dzive-labute-web\\ngApp\\src\\app\\services\\login\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private apiUrl = \"http://localhost:3000\"\n\n  constructor(private http: HttpClient, private cookieService: CookieService) { }\n\n  username: string = ''\n\n  login(loginData: any): Observable<any> {\n    const url = `${this.apiUrl}/auth/login`\n\n    this.username = loginData.username\n\n    // Send the login request to the backend API\n    return this.http.post<any>(url, loginData);\n\n  }\n\n  private authToken: string | null = null\n  setAuthToken(token: string): void {\n    this.cookieService.set('authToken', token)\n    this.authToken = token\n  }\n\n  getAuthToken(): string | null {\n    return this.cookieService.get('authToken');\n  }\n\n  // Modified method to include JWT in the Authorization header\n  private getHeaders(): HttpHeaders {\n    const token = this.getAuthToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    });\n  }\n\n  isAuthenticatedUser(): boolean {\n    return this.cookieService.check('authToken');\n  }\n\n  logout(): void {\n    this.cookieService.delete('authToken')\n  }\n\n  globalLogout(): void {\n    const url = `${this.apiUrl}/auth/glogout`\n    this.http.post(url, {}).subscribe(response => {\n      console.log(response)\n    })\n  }\n\n    // Modified method to include headers in the request\n    getProtectedData(): Observable<any> {\n      const url = `${this.apiUrl}/api/protected-data`;\n      const headers = this.getHeaders();\n  \n      return this.http.get(url, { headers });\n    }\n    \n\n    private logoutSubject = new Subject<void>();\n    logoutObservable = this.logoutSubject.asObservable()\n\n    notifyLogout() {\n      this.logoutSubject.next()\n    }\n\n    getUsername() {\n      return this.username\n    }\n}    \n\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,OAAO,QAAQ,MAAM;;;;AAK9B,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,aAAa,GAAbA,aAAa;IAFnD,KAAAC,MAAM,GAAG,uBAAuB;IAIxC,KAAAC,QAAQ,GAAW,EAAE;IAYb,KAAAC,SAAS,GAAkB,IAAI;IA2C7B,KAAAC,aAAa,GAAG,IAAIR,OAAO,EAAQ;IAC3C,KAAAS,gBAAgB,GAAG,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE;EA1DwB;EAI9EC,KAAKA,CAACC,SAAc;IAClB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,aAAa;IAEvC,IAAI,CAACC,QAAQ,GAAGM,SAAS,CAACN,QAAQ;IAElC;IACA,OAAO,IAAI,CAACH,IAAI,CAACW,IAAI,CAAMD,GAAG,EAAED,SAAS,CAAC;EAE5C;EAGAG,YAAYA,CAACC,KAAa;IACxB,IAAI,CAACZ,aAAa,CAACa,GAAG,CAAC,WAAW,EAAED,KAAK,CAAC;IAC1C,IAAI,CAACT,SAAS,GAAGS,KAAK;EACxB;EAEAE,YAAYA,CAAA;IACV,OAAO,IAAI,CAACd,aAAa,CAACe,GAAG,CAAC,WAAW,CAAC;EAC5C;EAEA;EACQC,UAAUA,CAAA;IAChB,MAAMJ,KAAK,GAAG,IAAI,CAACE,YAAY,EAAE;IACjC,OAAO,IAAInB,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUiB,KAAK;KACjC,CAAC;EACJ;EAEAK,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACjB,aAAa,CAACkB,KAAK,CAAC,WAAW,CAAC;EAC9C;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACnB,aAAa,CAACoB,MAAM,CAAC,WAAW,CAAC;EACxC;EAEAC,YAAYA,CAAA;IACV,MAAMZ,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,eAAe;IACzC,IAAI,CAACF,IAAI,CAACW,IAAI,CAACD,GAAG,EAAE,EAAE,CAAC,CAACa,SAAS,CAACC,QAAQ,IAAG;MAC3CC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;EAEE;EACAG,gBAAgBA,CAAA;IACd,MAAMjB,GAAG,GAAG,GAAG,IAAI,CAACR,MAAM,qBAAqB;IAC/C,MAAM0B,OAAO,GAAG,IAAI,CAACX,UAAU,EAAE;IAEjC,OAAO,IAAI,CAACjB,IAAI,CAACgB,GAAG,CAACN,GAAG,EAAE;MAAEkB;IAAO,CAAE,CAAC;EACxC;EAMAC,YAAYA,CAAA;IACV,IAAI,CAACxB,aAAa,CAACyB,IAAI,EAAE;EAC3B;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC5B,QAAQ;EACtB;EAAC,QAAA6B,CAAA,G;qBAtEQlC,YAAY,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZzC,YAAY;IAAA0C,OAAA,EAAZ1C,YAAY,CAAA2C,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}